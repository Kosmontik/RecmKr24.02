<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"> <!-- Устанавливает кодировку символов для страницы (UTF-8 поддерживает большинство символов) -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Конфигурирует viewport для адаптивного отображения на разных устройствах -->
    <title>3D Cube Scroll</title> <!-- Устанавливает заголовок страницы, который отображается в заголовке вкладки браузера -->
    <style>
        body, html {
            margin: 0; /* Убирает внешние отступы у элементов body и html */
            padding: 0; /* Убирает внутренние отступы у элементов body и html */
            height: 100%; /* Устанавливает высоту элементов body и html на 100% высоты окна браузера */
            width: 100%; /* Устанавливает ширину элементов body и html на 100% ширины окна браузера */
            overflow: hidden; /* Скрывает все элементы, которые выходят за границы элементов body и html, предотвращая появление полос прокрутки */
            perspective: 1000px; /* Устанавливает перспективу для 3D-трансформаций (чем меньше значение, тем сильнее эффект перспективы) */
        }
        .container {
            width: 100vw; /* Устанавливает ширину контейнера на 100% ширины viewport (видимой области окна браузера) */
            height: 100vh; /* Устанавливает высоту контейнера на 100% высоты viewport */
            transform-style: preserve-3d; /* Позволяет дочерним элементам сохранять свои 3D-трансформации, чтобы они отображались в 3D-пространстве */
            transition: transform 1s; /* Добавляет плавный переход для свойства transform, длительностью 1 секунда */
        }
        .block {
            width: 100vw; /* Устанавливает ширину блока на 100% ширины viewport */
            height: 100vh; /* Устанавливает высоту блока на 100% высоты viewport */
            position: absolute; /* Позиционирует блок абсолютно относительно ближайшего позиционированного родителя (в данном случае, container) */
            top: 0; /* Располагает верхний край блока вверху контейнера */
            left: 0; /* Располагает левый край блока слева контейнера */
            display: flex; /* Использует Flexbox для выравнивания содержимого блока */
            justify-content: center; /* Выравнивает содержимое по горизонтали по центру */
            align-items: center; /* Выравнивает содержимое по вертикали по центру */
            font-size: 2rem; /* Устанавливает размер шрифта текста в блоке */
            color: white; /* Устанавливает цвет текста в блоке белым */
        }
    </style>
</head>
<body>
    <div class="container"> <!-- Основной контейнер для 3D-куба -->
        <!-- Добавьте столько блоков, сколько нужно -->
        <div class="block" style="background: url('1.jpg') no-repeat center/cover;">1</div> <!-- Блок 1: Отображает изображение '1.jpg' в качестве фона, без повторения, центрируя его и масштабируя с сохранением пропорций -->
        <div class="block" style="background: url('2.jpg') no-repeat center/cover;">2</div> <!-- Блок 2: Отображает изображение '2.jpg' в качестве фона -->
        <div class="block" style="background: url('3.jpg') no-repeat center/cover;">3</div> <!-- Блок 3: Отображает изображение '3.jpg' в качестве фона -->
        <div class="block" style="background: url('4.jpg') no-repeat center/cover;">4</div> <!-- Блок 4: Отображает изображение '4.jpg' в качестве фона -->
        <div class="block" style="background: url('5.jpg') no-repeat center/cover;">5</div> <!-- Блок 5: Отображает изображение '5.jpg' в качестве фона -->
        <!-- Добавьте больше блоков по необходимости -->
        <!-- Добавьте больше блоков по необходимости -->
    </div>

    <script>
        let container = document.querySelector('.container'); // Получаем ссылку на элемент с классом 'container'
        let blocks = document.querySelectorAll('.block'); // Получаем список всех элементов с классом 'block'
        let currentRotation = 0; // Инициализируем переменную для хранения текущего угла поворота
        let rotationStep = 360 / blocks.length; // Рассчитываем шаг вращения для каждого блока, чтобы равномерно распределить их по окружности

        // Устанавливаем начальные трансформации для каждого блока
        blocks.forEach((block, index) => { // Перебираем все блоки
            let angle = rotationStep * index; // Рассчитываем угол поворота для каждого блока
            block.style.transform = `rotateX(${angle}deg) translateZ(50vh)`; // Устанавливаем трансформацию для каждого блока: поворот по оси X на вычисленный угол и смещение по оси Z на 50% высоты viewport (создает эффект 3D-расположения)
        });

        window.addEventListener('wheel', (event) => { // Добавляем обработчик события 'wheel' (колесо прокрутки) на окно браузера
            event.preventDefault(); // Предотвращаем стандартное поведение прокрутки страницы
            if (event.deltaY > 0) { // Если прокрутка вниз (deltaY > 0)
                currentRotation += rotationStep; // Увеличиваем угол поворота на шаг вращения
            } else if (event.deltaY < 0) { // Если прокрутка вверх (deltaY < 0)
                currentRotation -= rotationStep; // Уменьшаем угол поворота на шаг вращения
            }
            container.style.transform = `rotateX(${currentRotation}deg)`; // Устанавливаем трансформацию для контейнера: поворот по оси X на текущий угол поворота (анимирует вращение куба)
        });
    </script>
</body>
</html>


<style>
        body, html {
            margin: 0; 
            padding: 0; 
            height: 100%; 
            width: 100%; 
            overflow: hidden;
            perspective: 1000px; 
        }
        .container {
            width: 100vw; 
            height: 100vh;
            transform-style: preserve-3d; 
            transition: transform 1s; 
        }
        .block {
            width: 100vw; 
            height: 100vh; 
            position: absolute; 
            top: 0; 
            left: 0; 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            font-size: 2rem; 
            color: white; 
        }
    </style>
</head>
<body>
    <div class="container">

        <div class="block" style="background: url('1.jpg') no-repeat center/cover;">1</div> 
        <div class="block" style="background: url('2.jpg') no-repeat center/cover;">2</div> 
        <div class="block" style="background: url('3.jpg') no-repeat center/cover;">3</div> 
        <div class="block" style="background: url('4.jpg') no-repeat center/cover;">4</div> 
        <div class="block" style="background: url('5.jpg') no-repeat center/cover;">5</div> 


    </div>

    <script>
        let container = document.querySelector('.container'); 
        let blocks = document.querySelectorAll('.block'); 
        let currentRotation = 0; 
        let rotationStep = 360 / blocks.length; 
        blocks.forEach((block, index) => { 
            let angle = rotationStep * index; 
            block.style.transform = `rotateX(${angle}deg) translateZ(50vh)`; 
        });

        window.addEventListener('wheel', (event) => { 
            event.preventDefault(); 
            if (event.deltaY > 0) { 
                currentRotation += rotationStep; 
            } else if (event.deltaY < 0) { 
                currentRotation -= rotationStep; 
            }
            container.style.transform = `rotateX(${currentRotation}deg)`; 
        });
    </script>